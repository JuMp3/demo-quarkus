quarkus:
  http:
    port: 8080
    root-path: /api
    non-application-root-path: /q
  log:
    level: INFO
    console:
      #format: "%d{yyyy-MM-dd HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n"
      format: "%d{yyyy-MM-dd HH:mm:ss} %-5p traceId=%X{traceId}, spanId=%X{spanId}, [%c{5.}] (%t) %s%e%n"
  hibernate-orm:
    dialect: org.hibernate.dialect.PostgreSQLDialect
    log:
      sql: true
  smallrye-openapi:
    path: openapi
  application:
    version: 1.0.0
  datasource:
    db-kind: postgresql
    jdbc:
      url: jdbc:tracing:postgresql://${URL_DB}
      #driver: org.postgresql.Driver
      driver: io.opentracing.contrib.jdbc.TracingDriver
    username: ${USERNAME_DB}
    password: ${PASSWORD_DB}
#  smallrye-jwt:
#    enabled: true
  jaeger:
    service-name: quarkus-demo
    sampler-type: const
    sampler-param: 1

covid-api/mp-rest/url: https://api.covid19api.com
#covid-api/mp-rest/scope: javax.inject.Singleton
#covid-api/mp-rest/hostnameVerifier: io.quarkus.restclient.NoopHostnameVerifier

bitly-api/mp-rest/url: https://api-ssl.bitly.com

#mp:
#  jwt:
#    verify:
#      issuer: ${ISSUER_JWT}
#      publickey:
#        location: publickey.pem
#smallrye:
#  jwt:
#    sign:
#      key-location: privatekey.pem

bitly-token: ${BITLY_TOKEN}

jwt:
  service-token: ${SERVICE_TOKEN}
  issuer: ${ISSUER_JWT}
  secret: ${SECRET_JWT}
  expiration:
    time:
      minutes: 10

file:
  retention-days: 30
#quarkus.resteasy.path: /api
#quarkus.servlet.context-path: /api

"%local":
  quarkus:
    datasource:
      db-kind: postgresql
      jdbc:
        url: jdbc:postgresql://localhost:5432/postgres
        driver: org.postgresql.Driver
      username: postgres
      password: mysecretpassword
  file:
    root-folder: /work/quarkus/nfs

"%dev":
#  quarkus:
#    http:
#      port: 8081
  file:
    root-folder: /work/quarkus/nfs

"%prod":
  file:
    root-folder: /files

display:
  mach: 3
  unit:
    name: "mph"
    factor: 2.23694
